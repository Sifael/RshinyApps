runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
install.packages('rapport')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
install.packages('installr')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
runApp('Desktop/Apps/Sentiment/SentimentAnalysis.R')
library(shiny); runApp('Desktop/Apps/CoVID19/CoVID19Tracking.R')
library(shiny); runApp('Desktop/Apps/CoVID19/CoVID19Tracking.R')
data_file_name = paste("us_county_data", Sys.Date(), '.csv', sep = "_")
us_county_data = function()
{
if( file.exists(data_file_name)){ return(read.csv(data_file_name)) }
else {
us_data = covid19.US.data()
us_data = filter( us_data, Lat != 0 & Long_ != 0) %>%
gather( key = date, value = case_count,
c(colnames(us_data)[5:length(colnames(us_data))])) %>%
arrange(Province_State, Lat, Long_, date)
# classify cases
cases = c(rep(c("confirmed", "deaths"), nrow(us_data)/2 ))
us_data = add_column(us_data, cases, .after=5)
# shift subtract and Save this a local
us_data = as.data.table(us_data)
us_data = us_data[, case_agg:=c(0, case_count[-.N]), by=list(Country_Region,
Province_State,
Lat, Long_, cases)]
us_data$daily_cases = us_data$case_count - us_data$case_agg
write.csv(us_data, data_file_name, row.names = FALSE)
return(us_data)
}
}
# STATE LEVEL AGGRAGATION
state_level_aggregation = function( df )
{
df %>%
mutate( date = as.Date(date)) %>%
group_by(Country_Region, Province_State, cases, date) %>%
summarize(daily_cases = sum(daily_cases))
}
us_states = function(df)
{
states = df %>%
select(Province_State) %>%
distinct(Province_State) %>%
arrange(Province_State) %>%
pull(Province_State)
return(states)
}
# RETURNING TOP COUNTIES
top_counties = function(df , n)
{
df %>% filter(date == max(date) & cases == "confirmed") %>%
arrange(desc(daily_cases)) %>% group_by(Province_State) %>%
slice(1:n)
}
# GET THE DATA
us_county_covid_data = us_county_data()
us_states_covid_data = state_level_aggregation(us_county_covid_data)
us_states = us_states(us_states_covid_data)
us_top_counties = top_counties(us_county_covid_data, 4)
View(us_top_counties)
us_top_counties = as.data.table(top_counties(us_county_covid_data, 4))
head(us_top_counties)
install.packages("blscrapeR")
devtools::install_github("keberwein/blscrapeR")
library(blscrapeR)
df = data("county_map_data")
View(df)
df = data(county_map_merc)
View(df)
df = county_map_data()
df = county_map_data
View(df)
df = bls_map_county
View(df)
df = bls_map_county()
df = map_bls()
df = get_bls_county()
us_county_names = read.csv("Desktop/Apps/CoVID19/V0/county_names.csv")
View(us_county_names)
test = left_join(us_top_counties, us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
test = us_top_counties %>% left_join(us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
library(dplyr)
test = us_top_counties %>% left_join(us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
test = left_join(us_top_counties, us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
test = left_join(as.dataa.frame(us_top_counties), us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
test = left_join(as.data.frame(us_top_counties), us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
us_top_counties = top_counties(us_county_covid_data, 4)
test = left_join(us_top_counties, us_county_names, by("Lat" = "Lat", "Long_" = "Long"))
test = left_join(us_top_counties, us_county_names, by=c("Lat" = "Lat", "Long_" = "Long"))
View(test)
write.csv(us_top_counties, "us_top_counties.csv", row.names = FALSE )
us_county_names = read.csv("Desktop/Apps/CoVID19/V0/county_names.csv")
View(us_county_names)
test = left_join(us_top_counties, us_county_names, by=c("Lat" = "Lat", "Long_" = "Long"))
View(test)
library(covid19.analytics)
data <- covid19.data("TS-confirmed")
str(data)
names(data)
prov.col <- pmatch("Province",names(data))
provinces <- data[,prov.col]
print(unique(provinces))
print(sort(table(provinces)))
us_data = covid19.US.data(local.data = TRUE)
View(us_data)
us_county_names = read.csv("Desktop/Apps/CoVID19/USCountyName.csv")
View(us_county_names)
test = left_join(us_top_counties, us_county_names, by=c("Lat" = "Lat", "Long_" = "Long"))
test = left_join(us_top_counties, us_county_names, by=c("Lat" = "Lat", "Long_" = "Long_"))
View(test)
library(shiny); runApp('Desktop/Apps/CoVID19/CoVID19Tracking.R')
us_county_names = read.csv("USCountyName.csv")
us_data = covid19.US.data(local.data = TRUE)
View(us_data)
View(us_data)
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region, Province_State, Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
View(us_data)
cases = c(rep(c('confirmed', 'deaths'), nrow(us_data)/2 ))
us_data = add_column( us_data, cases, .after=5 )
View(us_data)
us_data = as.data.table(us_data)
us_data = us_data[, case_agg:c(0, case_count[-.N]), by=list(Country_Region,
Province_State,
Lat, Long_, case)]
us_data = us_data[, case_agg:=c(0, case_count[-.N]), by=list(Country_Region,
Province_State,
Lat, Long_, case)]
us_data$daily_cases = us_data$case_count - us_data$case_agg
View(us_data)
us_data = covid19.US.data(local.data = TRUE)
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region, Province_State, Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
cases = c(rep(c('confirmed', 'deaths'), nrow(us_data)/2))
us_data = add_column( us_data, cases, .after=5 )
us_data = as.data.table(us_data)
us_data = us_data[, case_agg:=c(0, case_count[-.N]), by=list(Country_Region,
Province_State,
Lat, Long_, case)]
us_data = as.data.table(us_data)
us_data = us_data[, case_agg:=c(0, case_count[-.N]), by=list(Country_Region,
Province_State,
Lat, Long_, cases)]
us_data$daily_cases = us_data$case_count - us_data$case_agg
View(us_data)
us_data = covid19.US.data(local.data = TRUE)
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region, Province_State, Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
cases = c(rep(c('confirmed', 'deaths'), nrow(us_data)/2))
us_data = add_column( us_data, cases, .after=5 )
View(us_data)
us_data = us_data %>% spread(cases, case_count)
View(us_data)
us_data = us_data %>% spread(key = cases, value = case_count)
us_data = us_data %>% spread(key = cases, value = case_count,
-c(Country_Region, Province_State, Lat, Long_, date))
us_data = covid19.US.data()
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region, Province_State, Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
cases = c(rep(c('confirmed', 'deaths'), nrow(us_data)/2))
us_data = add_column( us_data, cases, .after=5 )
View(us_data)
test = us_data %>% spread(key = cases, value = case_count,
-c(Country_Region, Province_State, Lat, Long_, date))
test = us_data %>% spread(key = cases, value = case_count)
test = us_data %>% pivot_wider(names_from = cases, values_from =case_count)
View(test)
us_data = us_data %>% pivot_wider(names_from = cases, values_from = case_count, values_fn = list)
View(us_data)
us_county_names = read.csv("Desktop/Apps/CoVID19/USCountyName.csv")
us_data = us_data %>% left_join(us_county_names, by = c("Long_" = "Long_", "Lat" = "Lat"))
View(us_data)
write.csv(us_data, "full_us_county_data.csv", row.names = FALSE)
View(us_data)
us_data$confirmed = as.numeric(us_data$confirmed)
us_data = us_data %>% pivot_wider(names_from = cases, values_from = case_count, values_fn = length)
us_data = covid19.US.data()
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region, Province_State, Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
cases = c(rep(c('confirmed', 'deaths'), nrow(us_data)/2))
us_data = add_column( us_data, cases, .after=5 )
us_data = us_data %>% pivot_wider(names_from = cases, values_from = case_count, values_fn = length)
us_data = us_data %>% left_join(us_county_names, by = c("Long_" = "Long_", "Lat" = "Lat"))
View(us_data)
us_data = us_data %>% pivot_wider(names_from = cases, values_from = case_count, values_fn = count)
us_data = covid19.US.data()
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region, Province_State, Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
cases = c(rep(c('confirmed', 'deaths'), nrow(us_data)/2))
us_data = add_column( us_data, cases, .after=5 )
us_data_wide = us_data %>% pivot_wider(names_from = cases, values_from = case_count)
library(data.table)
us_data_wide = as.data.table(us_data) %>% pivot_wider(names_from = cases, values_from = case_count)
us_data_wide = us_data %>% pivot_wider(names_from = cases, values_from = case_count,
values_fn = count)
us_data_wide = us_data %>% pivot_wider(names_from = cases, values_from = case_count,
values_fn = mean)
View(us_data_wide)
us_data_final = us_data_wide %>% left_join(us_county_names, by = c("Long_" = "Long_", "Lat" = "Lat"))
View(us_data_final)
write.csv(us_data_final, "full_us_county_data.csv", row.names = FALSE)
us_county_names = read.csv("Desktop/Apps/CoVID19/USCountyName.csv")
us_data_final = us_data_wide %>%
left_join(us_county_names, by = c("Long_" = "Long_", "Lat" = "Lat"))
us_data_final %>% filter( is.na(County)  )
write.csv(us_data_wide, "Desktop/Apps/CoVID19/V0/us_data_wide.csv", row.names = FALSE)
us_data_wide = read.csv("Desktop/Apps/CoVID19/V0/us_data_wide.csv")
View(us_data_wide)
us_counties = read.csv("Desktop/Apps/CoVID19/V0/USCountyName.csv")
test = us_data_wide %>% left_join(us_counties, by = by = c("Long_" = "Long_", "Lat" = "Lat") )
test = us_data_wide %>% left_join(us_counties, by = c("Long_" = "Long_", "Lat" = "Lat") )
View(test)
test %>% filter( is.na(County))
library(tidyverse)
library(covid19.analytics)
library(data.table)
us_data = covid19.US.data()
us_data = filter(us_data, Lat != 0 & Long_ != 0) %>%
gather(key = date, value = case_count, -c(Country_Region,
Province_State,
Lat, Long_)) %>%
arrange(Province_State, Lat, Long_, date)
us_data = add_column(us_data, cases, .after=5)
cases = c(rep(c("confirmed", "deaths"), nrow(us_data)/2))
us_data = add_column(us_data, cases, .after=5)
us_data_wide = us_data %>% pivot_wider(names_from = cases, values_from = case_count,
values_fill = 0, values_fn = mean)
View(us_data_wide)
us_counties = read.csv("Desktop/Apps/CoVID19/V0/USCountyName.csv")
us_data_full = us_data_wide %>% left_join(us_counties, by = c("Long_" = "Long_", "Lat" = "Lat"))
us_data_full %>% filter( is.na(County))
us_data_full %>% filter( is.na(County)) %>% length()
View(us_data_full)
unmapped = us_data_full %>% filter( is.na(County))
write.csv(unmapped, "Desktop/Apps/CoVID19/V0/unmapped.csv", row.names = FALSE)
str(us_counties)
str(us_data_wide)
us_counties$Lat = as.numeric(us_counties$Lat)
us_counties$Long_ = as.numeric(us_counties$Long_)
us_data_full = us_data_wide %>% left_join(us_counties, by = c("Long_" = "Long_", "Lat" = "Lat"))
unmapped = us_data_full %>% filter( is.na(County))
View(unmapped)
write.csv(unmapped, "Desktop/Apps/CoVID19/V0/unmapped.csv", row.names = FALSE)
library(shiny); runApp('Desktop/Apps/CoVID19/CoVID19Tracking.R')
library(shiny); runApp('CoVIDTrackingApp.R')
runApp('CoVIDTrackingApp.R')
runApp('CoVIDTrackingApp.R')
runApp('CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrackingApp.R')
library(shiny); runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
runApp('Desktop/Github/CoVIDTrendTrackingApp/CoVID19USMapandTrends.R')
install.packages("DT")
install.packages("DT")
library(shiny); runApp('Desktop/Github/CoVIDTrendTrackingApp/CoVID19USMapandTrends.R')
runApp('Desktop/Github/CoVIDTrendTrackingApp/CoVID19USMapandTrends.R')
library(shiny)
library(shinydashboard)
library(shinyWidgets)
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
runApp('Desktop/Github/SentimentAnalysisApp/SentimentAnalyzer.R')
grepl("^\\s*$", "sifael")
grepl("^\\s*$", "")
library(NLP)
library(SnowballC)
library(naivebayes)
library(stringi)
VectorSource( c("Sifael is great") )
library(tm)
VectorSource( c("Sifael is great") )
VCorpus( VectorSource(c ("sifael is a great dude") ) )
tm_map( VCorpus( VectorSource(c ("sifael is a great dude") ) ) )
tm_map( VCorpus( VectorSource(c ("sifael is a great dude") ) ), content_transformer(tolower) )
library(shiny); runApp('Desktop/Apps/Eureka/Eureka2.0..R')
runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
library(shiny); runApp('Desktop/Apps/Eureka/Eureka2.0..R')
runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
runApp('Desktop/Apps/CoVID19/CoVIDTrendsApp.R')
library(shiny); runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
df = read.csv('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/presidents_and_markets.csv')
head(df)
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
df
df %>% filter( President %in% input$president,
Market %in% input$market,
MonthEnd == 'True') %>%
group_by(President, Market, MonthEnd) %>%
mutate(pct_change = (Close/lead(Close) - 1) * 100)
df %>% filter( Market %in% c('Dow Jones Index'),
MonthEnd == 'True') %>%
group_by(President, Market, MonthEnd) %>%
mutate(pct_change = (Close/lead(Close) - 1) * 100)
test = df %>% filter( Market %in% c('Dow Jones Index'),
MonthEnd == 'True') %>%
group_by(President, Market, MonthEnd) %>%
mutate(pct_change = (Close/lead(Close) - 1) * 100)
view(test)
test = df %>% filter( Market %in% c('Dow Jones Index'),
MonthEnd == 'True') %>%
group_by(President, Market, MonthEnd) %>%
mutate(pct_change = (Close/lag(Close) - 1) * 100)
view(test)
23.19 - 26.18
2.99/26.18
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USPresidentsvsStockMarket/R/StockMarketvsPresidents.R')
runApp('Desktop/Programming/Apps/USMarketIndexbyPresident/US-Market-Indeces-by-President.R')
library(shiny); runApp('Desktop/Programming/Apps/USMarketIndexbyPresident/US-Market-Indeces-by-President.R')
runApp('Desktop/Programming/Apps/USMarketIndexbyPresident/US-Market-Indeces-by-President.R')
runApp('Desktop/Programming/Apps/USMarketIndexbyPresident/US-Market-Indeces-by-President.R')
library(shiny); runApp('Desktop/Sample.R')
install.packages('dplyr')
runApp('Desktop/Sample.R')
install.packages('lubridate')
runApp('Desktop/Sample.R')
install.packages('ggplot2')
runApp('Desktop/Sample.R')
install.packages('shinydashboard')
runApp('Desktop/Sample.R')
runApp('Desktop/Sample.R')
install.packages("bslib")
library(shiny)
library(bslib)
install.packages("fullPage")
remotes::install_github("RinteRface/fullPage")
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/Programming/Apps/Eureka/Eureka2.0..R')
install.packages("markdown")
runApp('Desktop/Programming/Apps/Eureka/Eureka2.0..R')
install.packages("shinywidgets")
install.packages("shinyWidgets")
runApp('Desktop/Programming/Apps/Eureka/Eureka2.0..R')
install.packages("lpSolveAPI")
runApp('Desktop/Programming/Apps/Eureka/Eureka2.0..R')
install.packages("CausalImpact")
runApp('Desktop/Programming/Apps/Eureka/Eureka2.0..R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
runApp('Desktop/ComputerVision/PencilSketch/ImagePencilSketchApp.R')
install.packages("imager")
install.packages("opencv")
library(imager)
install.packages("magrittr")
install.packages("magrittr")
library(imager)
install.packages("imager")
library(imager)
library(shiny); runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
install.packages("fullPage")
remotes::install_github("RinteRface/fullPage")
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
install.packages('shinyWidgets')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
068DA9
runApp('Desktop/R/Apps/PresidentsvsStockMarket/PresidentsVsStockMarket.R')
